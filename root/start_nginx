#!/usr/bin/env bash

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*${color:+\e[0m}" >&2; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*${color:+\e[0m}"; }
info() { echo -e "${color:+\e[37m}[*] $*${color:+\e[0m}"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return "$shift"
}
subinfo() { echo -e "${color:+\e[36m}[=] $*${color:+\e[0m}"; }
warn() { echo -e "${color:+\e[33m}[-] $*${color:+\e[0m}"; }
### Helpers end

bootstrap_pki() {
    local ca
    local cert
    local -a certs
    local country
    local days
    local k

    [[ $(querystr ".pki|length") -gt 0 ]] || return 0

    while read -r pki; do
        k=".pki[\"$pki\"]"

        ca="$(querystr "$k.ca")"
        country="$(querystr "$k.country")"
        days="$(querystr "$k.days")"

        # Create certify config, if missing
        if [[ ! -f /nap/data/pki/${pki// /_}/.cfg ]]; then
            mkdir -p "/nap/data/pki/${pki// /_}"
            cat >"/nap/data/pki/${pki// /_}/.cfg" <<EOF
cacn = ${ca:-Nginx App Proxy (NAP) CA}
cadays = ${days:-365}
certdays = ${days:-365}
city = $(querystr "$k.city")
company = $(querystr "$k.company")
country = ${country:-US}
state = $(querystr "$k.state")
unit = $(querystr "$k.unit")
EOF
        fi

        # Create all missing certs
        unset certs
        while read -r cert; do
            certs+=("$cert")
        done < <(querystr "$k.certs[]?"); unset cert

        certify -p "/nap/data/pki/${pki// /_}" "${certs[@]}"
    done < <(querystr ".pki|keys|.[]"); unset pki
}

generate_http_cfg() {
    local autoindex
    local block
    local cache
    local cert
    local custom
    local default
    local disableIPv4
    local disableIPv6
    local disableLog
    local enableIPv4
    local enableIPv6
    local forcetls
    local hsts
    local hstssubs
    local http="${1// /_}"
    local http2
    local k=".http[\"$1\"]"
    local key
    local loga="/nap/data/logs/${http,,}.access.log"
    local loge="/nap/data/logs/${http,,}.error.log"
    local pki
    local server
    local sub
    local -a subs
    local title="$1"
    local tmp="${title// /}"
    local ws

    subinfo "Creating $http Nginx http config"

    # Check for cert
    cert="$(querystr "$k.cert")"
    unset key

    # Transform cert into filepath
    case "$cert" in
        "") ;;
        "byoc/"*)
            key="/$cert.key.pem"
            cert="/$cert.chain.pem"
            ;;
        "letsencrypt/"*)
            key="/byoc/${cert#*/}/privkey.pem"
            cert="/byoc/${cert#*/}/fullchain.pem"
            ;;
        *"/"*)
            pki="${cert%/*}"
            key="/nap/data/pki/$pki/pems/${cert##*/}.key.pem"
            cert="/nap/data/pki/$pki/pems/${cert##*/}.chain.pem"
            ;;
        *)
            key="/nap/data/pki/default/pems/$cert.key.pem"
            cert="/nap/data/pki/default/pems/$cert.chain.pem"
            ;;
    esac

    # Store other configuration values
    custom="$(querystr "$k.custom[]?")"
    domain="$(querystr "$k.domain")"
    domain="${domain:-*}" # Default to wildcard

    # Store options
    autoindex="$(querybool "$k.options.autoindex")"
    block="$(querybool "$k.options.block_exploits")"
    cache="$(querybool "$k.options.cache_assets")"
    unset enableIPv4 enableIPv6
    disableIPv4="$(querybool "$k.options.disable_ipv4")"
    [[ -n $disableIPv4 ]] || enableIPv4="true"
    disableIPv6="$(querybool "$k.options.disable_ipv6")"
    [[ -n $disableIPv6 ]] || enableIPv6="true"
    disableLog="$(querybool "$k.options.disable_log")"
    forcetls="$(querybool "$k.options.force_tls")"
    hsts="$(querybool "$k.options.hsts")"
    hstssubs="$(querybool "$k.options.hsts_subdomains")"
    http2="$(querybool "$k.options.http2_support")"
    ws="$(querybool "$k.options.websocket_support")"

    [[ -z $disableLog ]] || loga="/dev/null"
    [[ -z $disableLog ]] || loge="/dev/null"
    [[ -z $hstssubs ]] || hsts="true"
    [[ -z $hsts ]] || forcetls="true"

    # Check for subdomains
    unset subs
    if [[ "${http,,}" != "default" ]]; then
        while read -r sub; do
            subs+=("$sub")
        done < <(querystr "$k.subdomains[]?"); unset sub

        [[ ${#subs[@]} -gt 0 ]] || subs+=("${tmp,,}")
    fi

    # Determine server name from subs
    server="${subs[*]}"
    [[ -z $server ]] || server="${server// /.$domain }.$domain"

    unset default
    [[ -n $server ]] || default="true"

    sed -r "/^\s*$/d" \
        >"/nap/data/cfgs/http.d/${http,,}.conf" <<EOF
# $title
server {
  # HTTP ports
${enableIPv4:+  listen 80${default:+ default_server};}
${enableIPv6:+  listen [::]:80${default:+ default_server};}

${cert:+  # HTTPS ports}
${enableIPv4:+${cert:+  listen 443 ${default:+default_server }ssl;}}
${enableIPv6:+${cert:+  listen [::]:443 ${default:+default_server }ssl;}}

${http2:+  # HTTP/2 support}
${http2:+  http2 on;}

  # Subdomains
  server_name ${server:-_};

  # Logs
  access_log $loga;
  error_log $loge;

${autoindex:+  # Allow directory indexing}
${autoindex:+  autoindex on;}

${cert:+  # TLS certs}
${cert:+  ssl_certificate $cert;}
${cert:+  ssl_certificate_key $key;}

${block:+  # Block common exploits}
${block:+  include /nap/sys/include/block_exploits.conf;}

${cache:+  # Cache assets}
${cache:+  include /nap/sys/include/cache_assets.conf;}

${forcetls:+  # Force TLS}
${forcetls:+  include /nap/sys/include/force_tls.conf;}

$(
    [[ -z $custom ]] || echo "  # User's custom config"
    while IFS="" read -r line; do
        echo "  $line"
    done <<<"$custom"
)

$(
    [[ $(querystr "$k.locations|length") -gt 0 ]] || return 0

    echo "  # User's custom locations"

    while read -r loc; do
        generate_loc "$loc" "$k.locations[\"$loc\"]"
    done < <(querystr "$k.locations|keys|.[]"); unset loc
)

  # Default location
$(generate_loc "" "$k")
}
EOF
}

generate_http_cfgs() {
    local http

    # Delete existing Nginx configs
    rm -f -r /nap/data/cfgs/http.d
    mkdir -p /nap/data/cfgs/http.d

    [[ $(querystr ".http|length") -gt 0 ]] || return 0

    # Create Nginx configs
    while read -r http; do
        generate_http_cfg "$http" &
    done < <(querystr ".http|keys|.[]"); unset http

    # Wait for all jobs to finish
    wait

    if [[ ! -f /nap/data/cfgs/http.d/default.conf ]]; then
        generate_http_default
    fi
}

generate_http_default() {
    subinfo "Creating default Nginx http config"
    cat >/nap/data/cfgs/http.d/default.conf <<EOF
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  location / {
    return 404;
  }
}
EOF
}

generate_loc() {
    local k="$2"
    local lhost
    local lport
    local lscheme
    local loc="$1"
    local root
    local tmp

    # Create alias, if defined
    tmp="$(querystr "$k.alias")"
    if [[ -n $tmp ]]; then
        cat <<EOF
  location /$loc {
    alias ${tmp%/};
  }
EOF
        return 0
    fi

    # Create file, if defined
    tmp="$(querystr "$k.file")"
    if [[ -n $tmp ]]; then
        root="$(dirname "$tmp")"
        [[ $root != "." ]] || unset root
        cat <<EOF
  location /$loc {
      root ${root:-/nap/www};
      try_files /${tmp##*/} /${tmp##*/};
  }
EOF
        return 0
    fi

    # Create redirect, if defined
    tmp="$(querystr "$k.redirect")"
    if [[ -n $tmp ]]; then
        cat <<EOF
  location /$loc {
    return 302 $tmp;
  }
EOF
        return 0
    fi

    # Create respond, if defined
    tmp="$(querystr "$k.respond")"
    if [[ -n $tmp ]]; then
        cat <<EOF
  location /$loc {
    default_type text/html;
    return 200 '$tmp';
  }
EOF
        return 0
    fi

    # Create root, if defined
    tmp="$(querystr "$k.root")"
    if [[ -n $tmp ]]; then
        cat <<EOF
  location /$loc {
    root ${tmp%/};
  }
EOF
        return 0
    fi

    # Create upstream, if defined
    lhost="$(querystr "$k.upstream.host")"
    lport="$(querystr "$k.upstream.port")"
    lscheme="$(querystr "$k.upstream.scheme")"

    if [[ -z $lhost ]]; then
        # No targets were defined
        cat <<EOF
  location /$loc {
    return 404;
  }
EOF
        return 0
    fi

    [[ -n $lscheme ]] || lscheme="http" # default value

    if [[ -z $lport ]]; then
        case "$lscheme" in
            "http") lport="80" ;; # default value
            "https") lport="443" ;; # default value
        esac
    fi

    # Determine resolver to use
    case "$lhost" in
        *"."*) tmp="8.8.8.8" ;;
        *) tmp="127.0.0.11" ;;
    esac

    cat <<EOF
  location /$loc {
${hsts:+    # HSTS (ngx_http_headers_module required) (31536000s = 1y)}
${hsts:+    add_header Strict-Transport-Security \"max-age=31536000${hstssubs:+; includeSubDomains}\" always;}

${ws:+    # Websocket support}
${ws:+    proxy_set_header Connection \$http_connection;}
${ws:+    proxy_set_header Upgrade \$http_upgrade;}

    include /nap/sys/include/proxy.conf;
    resolver $tmp valid=30s;
    set \$upstream $lhost;
    proxy_pass $lscheme://\$upstream:$lport;
  }
EOF
}

# shellcheck disable=SC2155
generate_navdash() {
    local background
    local button
    local border
    local cert
    local foreground
    local http
    local k
    local sub

    case "$(head -n 1 www/index.html 2>/dev/null)" in
        # echo -n "nap" | md5sum | awk '{print $1}'
        "4d3b2b4b063b4e4ae9cc04579c253c99") ;;
        *) return 0 ;;
    esac

    if ! querystr ".http|keys|.[]" | grep -qv "default"; then
        cat >/nap/www/index.html <<EOF
<html><body><h1>It works!</h1></body></html>
EOF
        return 0
    fi

    info "Generating NavDash"

    background="$(querystr ".navdash.background")"
    button="$(querystr ".navdash.\"button-background\"")"
    border="$(querystr ".navdash.\"button-border\"")"
    foreground="$(querystr ".navdash.foreground")"

    cat >/nap/www/index.html <<EOF
<html>
  <meta content="initial-scale=1, width=device-width" name="viewport">
  <link href="https://www.w3schools.com/w3css/4/w3.css" rel="stylesheet">
  <head>
    <style>
      .grid-container {
        display: grid;
        grid-gap: 16px;
        grid-auto-rows: minmax(64px, auto);
        grid-template-columns: repeat(auto-fit, minmax(256px, 1fr));
      }
      .w3-card-4 {
        background: #${button:-073642};
        border: 1px solid #${border:-268bd2};
      }
      a {
        text-decoration: none;
      }
      body {
        background: #${background:-002b36};
        color: #${foreground:-839496};
        margin: 64px;
        text-align: center;
      }
    </style>
  </head>
  <body>
    <div class="grid-container">
EOF

    (
        while read -r http; do
            k=".http[\"$http\"]"

            cert="$(querystr "$k.cert")"
            sub="$(querystr "$k.subdomains[0]")"
            sub="${sub:-${http// /}}"

            cat <<EOF
      <a href="" id="${http,,}">
        <div class="w3-card-4">
          <div class="w3-container w3-hover-shadow">
            <h1>$http</h1>
          </div>
        </div>
      </a>
      <script>
        document.getElementById("${http,,}").setAttribute(
          "href", "http${cert:+s}://${sub,,}." + window.location.host
        );
      </script>
EOF
        done < <(
            querystr ".http|keys|.[]" | grep -v "default"
        ); unset http
    ) >>www/index.html

    cat >>/nap/www/index.html <<EOF
    </div>
  </body>
</html>
EOF
}

generate_stream_cfg() {
    local custom
    local k=".stream[\"$1\"]"
    local listen
    local proto
    local stream="$1"
    local toconn
    local toproxy
    local upstream

    subinfo "Creating $stream Nginx stream config"

    # Store configuration values
    custom="$(querystr "$k.custom[]?")"
    listen="$(querystr "$k.listen")"
    proto="$(querystr "$k.proto")"
    toconn="$(querystr "$k.timeout.connect")"
    toproxy="$(querystr "$k.timeout.proxy")"
    upstream="$(querystr "$k.upstream")"

    case "${proto,,}" in
        "") ;;
        "tcp") unset proto ;;
        "udp") proto="udp" ;;
    esac

    sed -r "/^\s*$/d" \
        >"/nap/data/cfgs/stream.d/${stream// /_}.conf" <<EOF
$(
    [[ -z $custom ]] || echo "  # User's custom config"
    while IFS="" read -r line; do
        echo "$line"
    done <<<"$custom"
)

server {
  listen $listen${proto:+ $proto};
${toconn:+  proxy_connect_timeout $toconn;}
${toproxy:+  proxy_timeout $toproxy;}
  proxy_pass $upstream;
}
EOF
}

generate_stream_cfgs() {
    local stream

    # Delete existing Nginx configs
    rm -f -r /nap/data/cfgs/stream.d
    mkdir -p /nap/data/cfgs/stream.d

    [[ $(querystr ".stream|length") -gt 0 ]] || return 0

    # Create Nginx configs
    while read -r stream; do
        generate_stream_cfg "$stream" &
    done < <(querystr ".stream|keys|.[]"); unset stream

    # Wait for all jobs to finish
    wait
}

querybool() {
    local k="$1"
    local v

    v="$($jq "$k" <<<"$cfg")"
    case "${v,,}" in
        ""|"false"|"null") return 0 ;;
        "true") echo "true"; return 0 ;;
        *) err "invalid value for $k"; return 1 ;;
    esac
}

querystr() {
    local k="$1"
    local v

    v="$($jq "$k" <<<"$cfg")"
    case "${v,,}" in
        ""|"null") return 0 ;;
    esac

    echo "$v"
}

# shellcheck disable=SC2155
setup_nap() {
    local gid="$(id -g)"
    local uid="$(id -u)"

    # Attempt to fix owner
    sudo chown -R "$uid:$gid" /nap 2>/dev/null || true
    chmod ug=rwX,o-rwx /nap 2>/dev/null || true

    # Create needed directories
    mkdir -p /nap/data/{cfgs,logs,pki}

    # Fix perms
    chmod -R ug=rwX,o-rwx /nap 2>/dev/null || true
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

DESCRIPTION
    Start Nginx App Proxy (NAP).

OPTIONS
    -h, --help        Display this help message
        --no-color    Disable colorized output

EOF
    exit "$1"
}

validate_http_cfgs() {
    local cert
    local count
    local forcetls
    local http
    local http2
    local k
    local loc
    local pki
    local tmp

    [[ $(querystr ".http|length") -gt 0 ]] || return 0

    while read -r http; do
        k=".http[\"$http\"]"

        # Check for cert
        cert="$(querystr "$k.cert")"
        unset key

        # Transform cert into filepath
        case "$cert" in
            "") ;;
            "byoc/"*)
                key="/$cert.key.pem"
                cert="/$cert.chain.pem"
                ;;
            "letsencrypt/"*)
                key="/byoc/${cert#*/}/privkey.pem"
                cert="/byoc/${cert#*/}/fullchain.pem"
                ;;
            *"/"*)
                pki="${cert%/*}"
                key="/nap/data/pki/$pki/pems/${cert##*/}.key.pem"
                cert="/nap/data/pki/$pki/pems/${cert##*/}.chain.pem"
                ;;
            *)
                key="/nap/data/pki/default/pems/$cert.key.pem"
                cert="/nap/data/pki/default/pems/$cert.chain.pem"
                ;;
        esac

        # Validate cert exists, if configured
        if [[ -n $cert ]]; then
            if [[ ! -f "$cert" ]]; then
                errx 3 "$cert not found"
            elif [[ ! -f "$key" ]]; then
                errx 3 "$key not found"
            fi
        fi

        # Validate other configuration values
        querystr "$k.custom[]?" >/dev/null || exit 3;
        querystr "$k.domain" >/dev/null || exit 3;

        # Validate options
        querybool "$k.options.autoindex" >/dev/null || exit 3
        querybool "$k.options.block_exploits" >/dev/null || exit 3
        querybool "$k.options.cache_assets" >/dev/null || exit 3
        querybool "$k.options.disable_ipv4" >/dev/null || exit 3
        querybool "$k.options.disable_ipv6" >/dev/null || exit 3
        querybool "$k.options.disable_log" >/dev/null || exit 3;
        forcetls="$(querybool "$k.options.force_tls")" || exit 3
        tmp="$(querybool "$k.options.hsts")" || exit 3
        [[ -z $tmp ]] || forcetls="true"
        tmp="$(querybool "$k.options.hsts_subdomains")" || exit 3
        [[ -z $tmp ]] || forcetls="true"
        http2="$(querybool "$k.options.http2_support")" || exit 3
        querybool "$k.options.websocket_support" >/dev/null || exit 3

        if [[ -z $cert ]] && [[ -n $forcetls ]]; then
            errx 3 "$http can not force TLS with no cert"
        fi

        if [[ -z $cert ]] && [[ -n $http2 ]]; then
            errx 3 "$http can not support HTTP/2 with no cert"
        fi

        # Validate locations
        if [[ $(querystr "$k.locations|length") -gt 0 ]]; then
            while read -r loc; do
                count="0"

                # Check for alias
                tmp="$(querystr "$k.locations[\"$loc\"].alias")"
                if [[ -n $tmp ]]; then
                    ((count++))
                    [[ -d "$tmp" ]] || errx 3 "$tmp not found"
                fi

                # Check for file
                tmp="$(querystr "$k.locations[\"$loc\"].file")"
                [[ -z $tmp ]] || ((count++))

                # Check for redirect
                tmp="$(querystr "$k.locations[\"$loc\"].redirect")"
                [[ -z $tmp ]] || ((count++))

                # Check for respond
                tmp="$(querystr "$k.locations[\"$loc\"].respond")"
                [[ -z $tmp ]] || ((count++))

                # Check for root
                tmp="$(querystr "$k.locations[\"$loc\"].root")"
                if [[ -n $tmp ]]; then
                    ((count++))
                    [[ -d "$tmp" ]] || errx 3 "$tmp not found"
                fi

                # Check for upstream host
                tmp="$(
                    querystr "$k.locations[\"$loc\"].upstream.host"
                )"
                [[ -z $tmp ]] || ((count++))

                if [[ $count -gt 1 ]]; then
                    errx 3 \
                        "$http's location $loc has multiple targets"
                fi
            done < <(querystr "$k.locations|keys|.[]")
            unset loc
        fi

        # Validate upstream
        count="0"

        # Check for alias
        tmp="$(querystr "$k.alias")"
        if [[ -n $tmp ]]; then
            ((count++))
            [[ -d "$tmp" ]] || errx 3 "$tmp not found"
        fi

        # Check for file
        tmp="$(querystr "$k.file")"
        [[ -z $tmp ]] || ((count++))

        # Check for redirect
        tmp="$(querystr "$k.redirect")"
        [[ -z $tmp ]] || ((count++))

        # Check for respond
        tmp="$(querystr "$k.respond")"
        [[ -z $tmp ]] || ((count++))

        # Check for root
        tmp="$(querystr "$k.root")"
        if [[ -n $tmp ]]; then
            ((count++))
            [[ -d "$tmp" ]] || errx 3 "$tmp not found"
        fi

        # Check for upstream host
        tmp="$(querystr "$k.upstream.host")"
        [[ -z $tmp ]] || ((count++))

        if [[ $count -eq 0 ]]; then
            errx 3 "$http's root location has no targets"
        elif [[ $count -gt 1 ]]; then
            errx 3 "$http's root location has multiple targets"
        fi
    done < <(querystr ".http|keys|.[]"); unset http
}

validate_stream_cfgs() {
    local k
    local stream
    local tmp

    [[ $(querystr ".stream|length") -gt 0 ]] || return 0

    while read -r stream; do
        k=".stream[\"$stream\"]"

        # Validate custom is valid yaml
        querystr "$k.custom[]?" >/dev/null || exit 3;

        # Needs a listener defined
        tmp="$(querystr "$k.listen")"
        [[ -n $tmp ]] || errx 3 "$stream has no listen defined"

        # The proto must be tcp or udp
        tmp="$(querystr "$k.proto")"
        case "${tmp,,}" in
            ""|"tcp"|"udp") ;;
            *) errx 3 "$stream has invalid proto $tmp"
        esac

        # Best (low) effort validation of timeout format
        tmp="$(querystr "$k.timeout.connect")"
        case "$tmp" in
            "") ;;
            *[0-9]"ms") ;;
            *[0-9]"s") ;;
            *[0-9]"m") ;;
            *[0-9]"h") ;;
            *[0-9]"d") ;;
            *[0-9]"w") ;;
            *[0-9]"M") ;;
            *[0-9]"y") ;;
            *) errx 3 "$stream has invalid connect timeout" ;;
        esac

        tmp="$(querystr "$k.timeout.proxy")"
        case "$tmp" in
            "") ;;
            *[0-9]"ms") ;;
            *[0-9]"s") ;;
            *[0-9]"m") ;;
            *[0-9]"h") ;;
            *[0-9]"d") ;;
            *[0-9]"w") ;;
            *[0-9]"M") ;;
            *[0-9]"y") ;;
            *) errx 3 "$stream has invalid proxy timeout" ;;
        esac

        # Needs an upstream defined
        tmp="$(querystr "$k.upstream")"
        [[ -n $tmp ]] || errx 3 "$stream has no upstream defined"
    done < <(querystr ".stream|keys|.[]"); unset stream
}

declare -a args
unset help
color="true"
jq="jq -c -M -r -S"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage "$?" ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("certify")
deps+=("head")
deps+=("jq")
deps+=("nginx")
deps+=("sed")
deps+=("tail")
deps+=("y2j")
check_deps

# Check for valid params
[[ $# -eq 0 ]] || usage 1

# Setup directory structure
setup_nap

# Read config from disk just once
cfg="/nap/data/config.yaml"
[[ -f "$cfg" ]] || errx 2 "$cfg not found"
y2j "$cfg" || errx 3 "invalid yaml syntax"
cfg="$(y2j "$cfg")"

# Create missing certs
bootstrap_pki || exit "$?"

info "Validating NAP config"
validate_http_cfgs
validate_stream_cfgs
good "Success"

# Generate configs
info "Generating Nginx configs"
generate_http_cfgs
generate_stream_cfgs

generate_navdash

info "Validating Nginx configs"
nginx -c /nap/sys/nginx.conf -p /nap/data -T || errx "$?" "Fail"
sleep 1
good "Success"

# Start nginx
info "Starting Nginx"
nginx -c /nap/sys/nginx.conf -p /nap/data &

tail -f -n 0 /nap/data/logs/*.log
